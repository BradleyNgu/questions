---
const { questions, generate, includeLinks } = Astro.props;
import { MultipleChoiceQuestion } from "@common/MultipleChoiceQuestionGenerator";
import { default as Question } from "@components/MultipleChoiceQuestion/MultipleChoiceQuestion.astro";
import "./Evaluation.scss";
import Button from "@components/Button/Button.astro";

interface QuestionData {
  question: MultipleChoiceQuestion;
  links: {
    question: string;
    solution?: string;
    generator?: string;
  };
}

const loadedQuestions = await Promise.all(
  questions.map(async (question: any) => {
    const importString = `../../content/questions/${question}/index.md`;
    const data = await import(importString);
    return data;
  }),
);

const multipleChoiceQuestions = loadedQuestions.filter(
  (data: any) => data.frontmatter.type === "multiple-choice",
);

let multipleChoiceQuestionData: QuestionData[] = [];

await Promise.all(
  multipleChoiceQuestions.map(async (question: any) => {
    // if generate is true and a generator is present on the question, generate the question
    if (generate && question.frontmatter.generator) {
      const importString = `../../content/questions/${question.frontmatter.path}/generator`;
      const module = await import(importString);
      const klass = new module.default();
      const generatedQuestion = klass.generateQuestion();
      const questionData: QuestionData = {
        question: generatedQuestion,
        links: {
          question: question.frontmatter.path,
          solution: question.frontmatter.solution
            ? `solution/${question.frontmatter.path}`
            : undefined,
          generator: question.frontmatter.generator
            ? `generator/${question.frontmatter.path}`
            : undefined,
        },
      };

      multipleChoiceQuestionData.push(questionData);
    } else {
      const importString = `../../content/questions/${question.frontmatter.path}/question`;
      const data = await import(importString);

      // shuffle since this is the hardcoded question
      const shuffledQuestion = {
        ...data.question,
        options: data.question.options.sort(() => Math.random() - 0.5),
      };

      const dataLinks = {
        question: question.frontmatter.path,
        solution: question.frontmatter.solution
          ? `solution/${question.frontmatter.path}`
          : undefined,
        generator: question.frontmatter.generator
          ? `generator/${question.frontmatter.path}`
          : undefined,
      };

      const questionData: QuestionData = {
        question: shuffledQuestion,
        links: dataLinks,
      };

      multipleChoiceQuestionData.push(questionData);
    }
  }),
);
---

<div>
  {
    multipleChoiceQuestionData.map((data: QuestionData, index: number) => (
      <div class="Evaluation__question">
        <Question question={data.question} index={index} />
        {includeLinks && (
          <div class="Evaluation__questionLinks">
            <a href={`/questions/${data.links.question}`}>
              <Button
                icon="mdi mdi-help"
                disabled={data.links.question ? false : true}
              />
            </a>
            {data.links.solution && (
              <a href={`/questions/${data.links.solution}`}>
                <Button
                  icon="mdi mdi-check-bold"
                  disabled={data.links.solution ? false : true}
                />
              </a>
            )}
            {data.links.generator && (
              <a href={`/questions/${data.links.generator}`}>
                <Button
                  icon="mdi mdi-creation"
                  disabled={data.links.generator ? false : true}
                />
              </a>
            )}
            <a
              href={`https://github.com/CarletonComputerScienceSociety/questions/blob/main/src/content/questions/${data.links.question}/index.md`}
            >
              <Button icon="mdi mdi-github" />
            </a>
          </div>
        )}
        <br />
      </div>
    ))
  }
</div>
